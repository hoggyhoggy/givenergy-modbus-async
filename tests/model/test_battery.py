from givenergy_modbus_async.model.battery import Battery, UsbDevice
from givenergy_modbus_async.model.register_cache import RegisterCache


def test_from_registers(register_cache):
    """Ensure we can return a dict view of battery data."""
    assert Battery.from_orm(register_cache).dict() == {
        'bms_firmware_version': 3005,
        'cap_design': 160.0,
        'cap_design2': 160.0,
        'cap_calibrated': 190.97,
        'num_cells': 16,
        'num_cycles': 12,
        'cap_remaining': 18.04,
        'serial_number': 'BG1234G567',
        'soc': 9,
        'status_1': 0,
        'status_2': 0,
        'status_3': 6,
        'status_4': 16,
        'status_5': 1,
        'status_6': 0,
        'status_7': 0,
        't_bms_mosfet': 17.2,
        't_cells_13_16': 16.1,
        't_cells_01_04': 17.5,
        't_cells_05_08': 16.7,
        't_cells_09_12': 17.1,
        't_max': 17.4,
        't_min': 16.7,
        'usb_device_inserted': UsbDevice.DISK,
        'v_cell_01': 3.117,
        'v_cell_02': 3.124,
        'v_cell_03': 3.129,
        'v_cell_04': 3.129,
        'v_cell_05': 3.125,
        'v_cell_06': 3.13,
        'v_cell_07': 3.122,
        'v_cell_08': 3.116,
        'v_cell_09': 3.111,
        'v_cell_10': 3.105,
        'v_cell_11': 3.119,
        'v_cell_12': 3.134,
        'v_cell_13': 3.146,
        'v_cell_14': 3.116,
        'v_cell_15': 3.135,
        'v_cell_16': 3.119,
        'v_cells_sum': 49.97,
        'v_out': 50.029,
        'warning_1': 0,
        'warning_2': 0,
    }


def test_from_registers_actual_data(register_cache_battery_daytime_discharging):
    """Ensure we can instantiate an instance of battery data from actual registers."""
    assert Battery.from_orm(register_cache_battery_daytime_discharging).dict() == {
        'bms_firmware_version': 3005,
        'cap_design': 160.0,
        'cap_design2': 160.0,
        'cap_calibrated': 195.13,
        'num_cells': 16,
        'num_cycles': 23,
        'cap_remaining': 131.42,
        'serial_number': 'BG1234G567',
        'soc': 67,
        'status_1': 0,
        'status_2': 0,
        'status_3': 14,
        'status_4': 16,
        'status_5': 1,
        'status_6': 0,
        'status_7': 0,
        't_bms_mosfet': 17.2,
        't_cells_13_16': 14.6,
        't_cells_01_04': 16.8,
        't_cells_05_08': 15.7,
        't_cells_09_12': 16.5,
        't_max': 16.8,
        't_min': 15.7,
        'usb_device_inserted': UsbDevice.DISK,
        'v_cell_01': 3.232,
        'v_cell_02': 3.237,
        'v_cell_03': 3.235,
        'v_cell_04': 3.232,
        'v_cell_05': 3.235,
        'v_cell_06': 3.229,
        'v_cell_07': 3.237,
        'v_cell_08': 3.233,
        'v_cell_09': 3.238,
        'v_cell_10': 3.237,
        'v_cell_11': 3.235,
        'v_cell_12': 3.235,
        'v_cell_13': 3.235,
        'v_cell_14': 3.235,
        'v_cell_15': 3.24,
        'v_cell_16': 3.238,
        'v_cells_sum': 51.832,
        'v_out': 51.816,
        'warning_1': 0,
        'warning_2': 0,
    }


def test_from_registers_unsure_data(register_cache_battery_unsure):
    """Test case of battery registers returned for non-existent slave."""
    b = Battery.from_orm(register_cache_battery_unsure)
    assert b.serial_number == ''
    assert b.is_valid() is False
    assert b.dict() == {
        'bms_firmware_version': 0,
        'cap_calibrated': 0.0,
        'cap_design': 0.0,
        'cap_design2': 0.0,
        'cap_remaining': 0.0,
        'num_cells': 0,
        'num_cycles': 0,
        'serial_number': '',
        'soc': 0,
        'status_1': 0,
        'status_2': 0,
        'status_3': 0,
        'status_4': 0,
        'status_5': 0,
        'status_6': 0,
        'status_7': 0,
        't_bms_mosfet': 25.6,
        't_cells_01_04': 5.2,
        't_cells_05_08': 0.0,
        't_cells_09_12': 0.0,
        't_cells_13_16': 0.0,
        't_max': 0.0,
        't_min': 0.0,
        'usb_device_inserted': UsbDevice.NONE,
        'v_cell_01': 0.0,
        'v_cell_02': 0.0,
        'v_cell_03': 0.0,
        'v_cell_04': 0.0,
        'v_cell_05': 0.0,
        'v_cell_06': 0.0,
        'v_cell_07': 0.0,
        'v_cell_08': 0.0,
        'v_cell_09': 0.0,
        'v_cell_10': 0.0,
        'v_cell_11': 0.0,
        'v_cell_12': 0.0,
        'v_cell_13': 0.0,
        'v_cell_14': 0.0,
        'v_cell_15': 0.0,
        'v_cell_16': 0.0,
        'v_cells_sum': 0.0,
        'v_out': 0.0,
        'warning_1': 0,
        'warning_2': 0,
    }


def test_empty():
    """Ensure we can instantiate from empty data."""
    b1 = Battery()
    b2 = Battery.from_orm(RegisterCache({}))
    assert b1.serial_number is None
    assert b1.is_valid() is False
    assert b2.serial_number is None
    assert b2.is_valid() is False

    assert (
        b1.dict()
        == b2.dict()
        == {
            'bms_firmware_version': None,
            'cap_calibrated': None,
            'cap_design': None,
            'cap_design2': None,
            'cap_remaining': None,
            'num_cells': None,
            'num_cycles': None,
            'serial_number': None,
            'soc': None,
            'status_1': None,
            'status_2': None,
            'status_3': None,
            'status_4': None,
            'status_5': None,
            'status_6': None,
            'status_7': None,
            't_bms_mosfet': None,
            't_cells_01_04': None,
            't_cells_05_08': None,
            't_cells_09_12': None,
            't_cells_13_16': None,
            't_max': None,
            't_min': None,
            'usb_device_inserted': None,
            'v_cell_01': None,
            'v_cell_02': None,
            'v_cell_03': None,
            'v_cell_04': None,
            'v_cell_05': None,
            'v_cell_06': None,
            'v_cell_07': None,
            'v_cell_08': None,
            'v_cell_09': None,
            'v_cell_10': None,
            'v_cell_11': None,
            'v_cell_12': None,
            'v_cell_13': None,
            'v_cell_14': None,
            'v_cell_15': None,
            'v_cell_16': None,
            'v_cells_sum': None,
            'v_out': None,
            'warning_1': None,
            'warning_2': None,
        }
    )
